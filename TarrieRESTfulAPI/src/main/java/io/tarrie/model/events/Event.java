package io.tarrie.model.events;

import com.amazonaws.services.dynamodbv2.datamodeling.*;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.tarrie.database.contants.DbAttributes;
import io.tarrie.database.contants.DbConstants;
import io.tarrie.database.contants.EntityTypeEnum;
import io.tarrie.database.exceptions.MalformedInputException;
import io.tarrie.model.*;
import io.tarrie.model.constants.CharacterLimit;
import io.tarrie.model.constants.EventLimits;
import io.tarrie.model.consumes.CreateEvent;
import io.tarrie.utilities.MapGraphQLSerializer;
import io.tarrie.utilities.MapTypeConverted;
import io.tarrie.utilities.Utility;

import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import java.lang.reflect.InvocationTargetException;
import java.util.*;

/** ToDo: Add support for polls, documents associated with event */
@JsonInclude(JsonInclude.Include.NON_NULL)
@DynamoDBTable(tableName = DbConstants.BASE_TABLE)
@ApiModel(description = "A Tarrie event")
@DynamoDBDocument
public class Event {
  private String id;
  private String idCopy;
  private EventPrivacy privacy;
  private String name;
  private String imgPath;
  private Map location;
  private String startTime;
  private String endTime;
  private Date createdTime;
  private boolean linkSharing;
  private String bio;
  private Set<String> coordinators;

  private Entity hostInfo; // has to be queried
  private List<User> rsvps; // has to be queried
  private Set<String> hashTags;
  private List<String> invitedEntityIds; // has to be queried
  private List<SharableLink> sharableLinks; // has to be queried
  // private int rsvpNum; // atomic counter

  private String text;

  /* ********* getters ***********/
  @JsonProperty(DbAttributes.HASH_KEY)
  @DynamoDBHashKey(attributeName = DbAttributes.HASH_KEY)
  @ApiModelProperty(notes = "The unique identifier for the event")
  @NotNull
  public String getId() {
    return id;
  }

  @JsonProperty(DbAttributes.SORT_KEY)
  @DynamoDBRangeKey(attributeName = DbAttributes.SORT_KEY)
  @NotNull
  public String getIdCopy() {
    return idCopy;
  }

  @JsonProperty(DbAttributes.CREATED_TIME)
  @DynamoDBAttribute(attributeName = DbAttributes.CREATED_TIME)
  @DynamoDBAutoGeneratedTimestamp(strategy = DynamoDBAutoGenerateStrategy.CREATE)
  @ApiModelProperty(notes = "the time the event was created of rsvps to the event")
  public Date getCreatedTime() {
    return createdTime;
  }

  /*
  @JsonProperty(DbAttributes.RSVP_NUM)
  @DynamoDBAttribute(attributeName = DbAttributes.RSVP_NUM)
  @ApiModelProperty(notes = "the num of rsvps to the event")
  public int getRsvpNum() {
    return rsvpNum;
  }*/

  @JsonProperty(DbAttributes.EVENT_COORDINATORS)
  @DynamoDBAttribute(attributeName = DbAttributes.EVENT_COORDINATORS)
  @ApiModelProperty(notes = "the id's of the hosts of the event")
  public Set<String> getCoordinators() {
    return coordinators;
  }

  @JsonSerialize(using = MapGraphQLSerializer.class)
  @JsonProperty(DbAttributes.LOC)
  @DynamoDBTypeConverted(converter = MapTypeConverted.class)
  @DynamoDBAttribute(attributeName = DbAttributes.LOC)
  @ApiModelProperty(notes = "the location of event")
  @NotNull
  public Map getLocation() {
    return location;
  }

  @JsonProperty(DbAttributes.TEXT)
  @DynamoDBAttribute(attributeName = DbAttributes.TEXT)
  @ApiModelProperty(notes = "Additional text attached to event")
  public String getText() {
    return text;
  }

  @JsonProperty(DbAttributes.BIO)
  @DynamoDBAttribute(attributeName = DbAttributes.BIO)
  @ApiModelProperty(value = "The description of the event")
  @Size(min = 0, max = CharacterLimit.LARGE)
  public String getBio() {
    return bio;
  }

  @JsonProperty(DbAttributes.IMG_PATH)
  @DynamoDBAttribute(attributeName = DbAttributes.IMG_PATH)
  @ApiModelProperty(notes = "url on S3 that holds the events image")
  @NotNull
  public String getImgPath() {
    return imgPath;
  }

  @JsonProperty(DbAttributes.NAME)
  @DynamoDBAttribute(attributeName = DbAttributes.NAME)
  @ApiModelProperty(notes = "The name of the event")
  @Size(min = 1, max = CharacterLimit.SMALL)
  @NotNull
  public String getName() {
    return name;
  }

  @JsonProperty(DbAttributes.END_TIME)
  @DynamoDBAttribute(attributeName = DbAttributes.END_TIME)
  @ApiModelProperty(notes = "end time of the event")
  public String getEndTime() {
    return endTime;
  }

  @JsonProperty(DbAttributes.HOST_INFO)
  @DynamoDBAttribute(attributeName = DbAttributes.HOST_INFO)
  @ApiModelProperty(notes = "the entity hosting the event. Either a User or a Group")
  @NotNull
  public Entity getHostInfo() {
    return hostInfo;
  }

  @JsonProperty(DbAttributes.DATA)
  @DynamoDBAttribute(attributeName = DbAttributes.DATA)
  @ApiModelProperty(notes = "start time of the event")
  @NotNull
  public String getStartTime() {
    return startTime;
  }

  @JsonProperty(DbAttributes.HASH_TAGS)
  @DynamoDBAttribute(attributeName = DbAttributes.HASH_TAGS)
  @ApiModelProperty(notes = "hash tags associated with event")
  @Size(max = DbConstants.HASH_TAG_PER_EVENT)
  public Set<String> getHashTags() {
    return hashTags;
  }

  @JsonProperty(DbAttributes.EVENT_PRIVACY)
  @DynamoDBAttribute(attributeName = DbAttributes.EVENT_PRIVACY)
  @ApiModelProperty(notes = "The privacy specifications of the events")
  @NotNull
  public EventPrivacy getPrivacy() {
    return privacy;
  }

  @DynamoDBIgnore // has to be queried
  @ApiModelProperty(value = "Collection of SharableLinks associated to the event", hidden = true)
  public List<SharableLink> getSharableLinks() {
    return sharableLinks;
  }

  @DynamoDBIgnore // has to be queried
  @ApiModelProperty(value = "Collection of entityIds invited to event")
  @NotNull
  public List<String> getInvitedEntityIds() {
    return invitedEntityIds;
  }

  @DynamoDBIgnore // has to be queried
  @ApiModelProperty(notes = "the user's that have rsvp'd (going to) to the event")
  @NotNull
  public List<User> getRsvps() {
    return rsvps;
  }

  @DynamoDBAttribute(attributeName = DbAttributes.LINK_SHARING)
  @ApiModelProperty(value = "Boolean saying if link sharing is on or not(default is off)")
  public boolean isLinkSharing() {
    return linkSharing;
  }

  /* ********* setters ***********/
  public void setCreatedTime(Date createdTime) {
    this.createdTime = createdTime;
  }

  public void setPrivacy(EventPrivacy privacy) {
    this.privacy = privacy;
  }

  public void setStartTime(String startTime) throws MalformedInputException {
    Utility.isDateTimeValid(startTime);
    this.startTime = startTime;
  }

  // public void setRsvpNum(int rsvpNum) {
  //   this.rsvpNum = rsvpNum;
  // }

  public void setLocation(Map location) {
    this.location = location;
  }

  public void setHostInfo(Entity hostInfo) {
    this.hostInfo = hostInfo;
  }

  public void setBio(String bio) {
    this.bio = bio;
  }

  public void setEndTime(String endTime) throws MalformedInputException {
    Utility.isDateTimeValid(endTime);
    this.endTime = endTime;
  }

  public void setImgPath(String imgPath) throws MalformedInputException {
    if (!Utility.isUrlvalid(imgPath)) {
      throw new MalformedInputException(
          String.format("[Event::setImgPath] invalid imgPath: %s", imgPath));
    }
    this.imgPath = imgPath;
  }

  public void setName(String name) {
    this.name = name;
  }

  public void setId(String id) throws MalformedInputException {
    if (!(Utility.isIdValid(id, EntityTypeEnum.EVT))) {
      throw new MalformedInputException(String.format("[Event::setId] malformed id: %s", id));
    }
    this.id = id;
    this.idCopy = id;

  }

  public void setHashTags(Set<String> hashTags) throws MalformedInputException {
    Utility.verifyHashTags(hashTags);
    this.hashTags = hashTags;
  }

  public void setInvitedEntityIds(List<String> invitedEntityIds) throws MalformedInputException {
    Utility.isValidEntitySet(coordinators, "Event::setInvitedEntityIds");
    this.invitedEntityIds = invitedEntityIds;
  }

  public void setLinkSharing(boolean linkSharing) {
    this.linkSharing = linkSharing;
  }

  public void setRsvps(List<User> rsvps) {
    this.rsvps = rsvps;
  }

  public void setSharableLinks(List<SharableLink> sharableLinks) {
    this.sharableLinks = sharableLinks;
  }

  public void setCoordinators(Set<String> coordinators) throws MalformedInputException {
    Utility.isValidEntitySet(coordinators, "Event::setCoordinators");
    this.coordinators = coordinators;
  }

  public void setIdCopy(String idCopy) throws MalformedInputException {
    if (!(Utility.isIdValid(idCopy, EntityTypeEnum.EVT))) {
      throw new MalformedInputException(
          String.format("[Event::setIdCopy] malformed id: %s", idCopy));
    }
    this.idCopy = idCopy;
  }

  public void setText(String text) {
    this.text = text;
  }
}
